A simple, resilient and secure backup script, which produces =age=
encrypted =tar= archives, and can save them locally or stream them via
ssh to a remote host.

The ideal use case is off-host backup up discrete data sets, where the
collecting server handles replication offsite and long-term storage.

Design Goals:

- Simple
  - transparent operation and data formats
  - state and data accessible with common tools
  - no new services or vendors
- Resilient
  - degrades in predictable ways
  - proven tools and formats
- Secure
  - public key based encryption
  - replication outside of trust boundary/offline
  - compromised hosts cannot modify their backups

Requirements:

- [[https://github.com/FiloSottile/age][age]]
- gnu tar
- ssh

* How it works

#+begin_example
‚ùØ bub -v -d backups repositories craig@silence:backups
Using host ssh key at /etc/ssh/ssh_host_ed25519_key.pub
Will use /home/craig/backups/home_craig_repositories-2024-11.snar to track archive contents for incremental backups.
Backing up repositories to craig@silence:backups/garden-home_craig_repositories-full-2024-11-15T145634.tar.zstd.age
Confirm user presence for key ED25519-SK SHA256:u1dKjM+B7cBvzfZO3Lrd5rLyLbGolsOyA8AmLHAc+lo
Enter PIN for ED25519-SK key /home/craig/.ssh/craig_taconic_yk: 
Confirm user presence for key ED25519-SK SHA256:u1dKjM+B7cBvzfZO3Lrd5rLyLbGolsOyA8AmLHAc+lo
User presence confirmed
Updating /home/craig/backups/home_craig_repositories-2024-11.snar
#+end_example

The first archive will be a full dump, aka level 0, and subsequent
archives will be incremental, using the state stored in the target's
=snar= file to determine modifications since the last run.
Periodically, a new full dump will be made.  The default period is
monthly.

The archive will be created in the specific destination, which can be a path, like =$HOME/backups= or an scp  path like =username@host:/var/backups=.  The archive will be create with a filename of the pattern =<host>-<target_slug>-<ts>-<type>.tar.zstd.age=.  The =<target_slug>= is the sanitized full path of the target.  The =<ts>= is a timestamp of the form =+%Y-%m-%dT%H%M%S= produced by the =date= program.  The =<type>= is "full" or "incrementalf" and indicated the type of the archive.

The archive is encrypted with the public ssh key of the host by
default.  An =ssh= or =age= public key or file can be provided with
the =-r= argument.  The archive will only be readable with the
corresponding private key.

The state needed to support incremental backups is stored in a =snar= file that is created and subsequently updated in the current working dir, or the data directory if the =-d dir= argument is given.

* Deployment

Installing =bub= can be done by copying the =bub= script to your hosts,  and ensuring that =age= and GNU =tar= are installed.

** On Hosts

*** Data Directory

Decide where you want to store state.  Most of the time =bub= will be
running as root, so =/var/lib/bub= is a fine choice.

This directory will contains the =snar= files used to track
incremental backups.  Losing these will mean starting with a full
backup again. 

*** Encryption Keys

An encryption/description key pair will be needed.  The default
recipient key for =bub= is ed25519 ssh host key in
=/etc/ssh/ssh_host_ed25519.pub=.  It will also work with the rsa key
in the same directory, but you will need to tell it to use that with
the =-r /etc/ssh/ssh_host_rsa.pub= argument,

You can also generate an =age= key using =age-keygen=.  For example, if you wanted to have the same key for all servers in a cluster, you could share the age pub key on the servers in your data directory.

To generate an age key:

#+begin_example
mkdir -p /etc/bub
cd /etc/bub
$ age-keygen -o bub.key
Public key: age1lnxyrte2xgey3mf72n9twreh373d508q3lcp5wsk9phxz4h5xfjseguj2s
#+end_example

The public key that it prints out will be what you pass to bub with
the =-r= argument.

Regardless of which key you use, *backup the private key in your
credential manager*.  If using the ssh host keys, they are alongside
the pub keys in =/etc/ssh/ssh_host_ed25519= and
=/etc/ssh/ssh_host_rsa=.

Let's repeat that..

*MAKE AN OFF HOST BACKUP OF THE SECRET KEY*

The private key will needed to read any backups, so you want to make
sure you have a copy if the host is compromised or the disk fails.

** On the Backup Server

The primary considerations for configuring the backup servers re:

- ssh access for clients
- if and where to replicate archives

*** SSH Access for hosts

The simplest solutions is to create a single user account, and then place ssh public keys for the clients in =~/.ssh/authorized_keys= and create the target directory with appropriate permissions.

The clients need shell access, any posix shell will work.

A single, shared account means that clients can delete or modify each
others archives.  A mitigation for this is to remove read permission
on the incoming directory for the user.

Creating an account per client is another option, and isolates them from one another. 

*** Storing and Replication of Archives

Once archives are on the collecting server, they can be moved to a
location where the client cannot modify or delete them.  They can also be replicated offsite.

#+begin_src shell
#/usr/bin/env bash
# where clients put new archives
ARCHIVE_DIR="/home/bub/archives"
# where we want to replicate
REPLICA_DIR="/var/bub/replica"

cp -Pn "$ARCHIVE_DIR/*.tar.zstd.age" "$REPLICA_DIR"

done
#+end_src


