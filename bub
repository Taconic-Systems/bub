#!/usr/bin/env bash
set -euo pipefail

#progname=$(basename $0)
progname="bub"

OPTSTR=":r:f:d:uhv"

echoerr() { echo "$@" 1>&2; }
verbose() { if [[ -n $verbose ]]; then
	      echo "$@" 1>&2;
	    fi
	  }

usage() {
  echo "$progname usage: [OPTIONS...]  SOURCE DESTINATION"
  echo ""
  echo "Arguments:"
  echo "    SOURCE            -- a file or directory to backup"
  echo "    DESTINATION       -- a path"
  echo "                         or ssh path (ssh://user@host:path)"
  echo "                         or bub path (bub://user@host)"
  echo "                         The archive will be created in this location"
  echo ""
  echo "Options:"
  echo "     -r key|keyfile   -- an ssh/age pub key file, or pub key string"
  echo "                         The archive will be encrypted for this recipient"
  echo "                         If not specified, will use the host ssh key in"
  echo "                         '/etc/ssh/ssh_host_ed25519_key.pub'"
  echo "     -f freq          -- the frequency of full snapshots, monthly(default), weekly, daily"
  echo "     -d dir           -- the directory to track backup state, defaults to PWD"
  echo "     -v               -- verbose output"
  echo "     -u               -- unencrypted archive"
  echo ""
  echo "Environment Variables:"
  echo "    BUB_SSH_OPTS      -- ssh cmdline args prepended to all ssh commands"
  echo "                         eg. BUB_SSH_OPTS=\"-p 2222\" to specify an ssh server port"
  echo "    BUB_TAR_OPTS      -- tar cmdline args prepended to tar commands"
  echo "                         eg. BUB_TAR_OPTS=\"--exclude='*.bak'\" to exclude files matching a pattern"
  exit 1;
}

unencrypted=""
recipient=""
frequency="monthly"
ssh_opts=${BUB_SSH_OPTS:-""}
tar_opts=${BUB_TAR_OPTS:-""}
data_dir=${BUB_DATA_DIR:-$PWD}
verbose=""

[ $# -eq 0 ] && usage
while getopts $OPTSTR o; do
  case "${o}" in
    --)
      # No more options left.
      break
      ;;
    r)
      recipient="${OPTARG}"
      ;;
    f)
      frequency="${OPTARG}"
      ;;
    v)
      verbose="true"
      ;;
    d)
      data_dir="${OPTARG}"
      ;;
    u)
      unencrypted="true"
      ;;
    h | *)
      usage
      ;;
  esac
done

shift $((OPTIND-1))

source=${1:?source is required}
destination=${2:?destination is required}

readonly URI_REGEX='^(([^:/?#]+):)?(//((([^:/?#]+)@)?([^:/?#]+)(:([0-9]+))?))?((/|$)([^?#]*))(\?([^#]*))?(#(.*))?$'

if [[ $destination =~ $URI_REGEX ]]; then
  destination_scheme=${BASH_REMATCH[2]}
  destination_user=${BASH_REMATCH[6]}
  destination_host=${BASH_REMATCH[7]}
  destination_port=${BASH_REMATCH[9]}
  destination_path=${BASH_REMATCH[10]}
else
  destination_scheme="file"
  destination_path="$destination"
fi

if [[ $destination_scheme = "bub" ]]; then
  if [[ -n $destination_path ]]; then
    echoerr "ERROR: cannot specify path for bub store"
    exit 1
  fi
elif [[ $destination_scheme = "ssh" ]]; then
  if [[ -n $destination_path ]]; then
    destination_path=$(echo "$destination_path" | sed 's/^\///')
  fi
elif [[ ! $destination_scheme = "file" ]]; then
  echoerr "ERROR: unknown URL scheme for target"
fi

host_key="/etc/ssh/ssh_host_ed25519_key.pub"

if [[ -z "$recipient" ]]; then
  if [[ -r "$host_key" ]]; then
    verbose "INFO: Using host ssh key at $host_key"
    recipient=$host_key
  else
    echoerr "ERROR: Cannot read host key, a recipient must be specified"
    exit 1
  fi
fi


if [[ -z "$frequency" ]]; then
   frequency="monthly"
fi

source_slug=$(realpath $source | sed 's/[/ ]/_/g' | sed 's/[_]//')

case "$frequency" in
  monthly)
    snar_ts=$(date +%Y-%m)
    ;;
  weekly)
    snar_ts=$(date +%Y-%V)
    ;;
  daily)
    snar_ts=$(date +%Y-%m-%d)
    ;;
  *)
    echoerr "ERROR: Unrecognized full dump frequency: $frequency"
    exit 1
    ;;
esac

source_snar=$(realpath "${data_dir}/${source_slug}-${snar_ts}.snar")
working_snar="${source_snar}.working"


if [[ -f $source_snar ]]; then
  full="";
else
  full="yes";
fi

if [[ -f $working_snar ]]; then
  echoerr "ERROR: A working snar file was found at ${working_snar}"
  echoerr "ERROR: Another bub process may be working on this source."
  exit 1
fi


if [[ -n $unencrypted ]]; then
  encryption_ext=""
else
  encryption_ext=".age"
fi

host=$(hostname)

if [[ -n $full ]]; then
  archive_type="full"
else
  archive_type="incremental"
fi

archive_ts=$(date +%Y-%m-%dT%H%M%S)
archive_base="${host}-${source_slug}-${archive_ts}-${archive_type}.tar.zstd${encryption_ext}"
if [[ -n "$destination_path" ]]; then
  archive="${destination_path}/${archive_base}"
else
  archive="${archive_base}"
fi

cleanup_snar() {
  trash="${source_snar}.working"
  if [[ -f "${trash}" ]]; then
    verbose "INFO: Cleaning up working snar archive, ${trash}";
    rm "${trash}"
  fi
}

update_snar() {
  verbose "INFO: Updating ${source_snar}"
  mv "${source_snar}.working" "${source_snar}"
}


tar_cmd() {
  verbose "INFO: Will use ${source_snar} to track archive contents for incremental backups." ;

  if [[ -f $source_snar ]]; then
    working="${source_snar}.working"
    verbose "INFO: Making working copy of snar at ${working}"
    cp -p "$source_snar" "${working}"
  fi


  if [[ -n $full ]]; then
    tar $tar_opts --zstd --create --level=0 --listed-incremental="${source_snar}.working" "$source";
  else
    tar $tar_opts --zstd --create --listed-incremental="${source_snar}".working "$source";
  fi

}

age_cmd() {
  if [[ -f $recipient ]]; then
    age -R "$recipient";
  else
    age -r "$recipient";
  fi
}

if [[ -n $destination_user ]]; then
  ssh_spec="$destination_user@$destination_host"
else
  ssh_spec="$destination_host"
fi

ssh_cmd() {
    verbose "INFO: Backing up $source to ${destination_scheme}://${ssh_spec}/${archive}";
  if [[ -n $destination_path ]]; then
    ssh -T $ssh_opts "$ssh_spec" "mkdir -p $destination_path && (cat > ${archive}.working && mv ${archive}.working ${archive})";
  else
    ssh -T $ssh_opts "$ssh_spec" "(cat > ${archive}.working && mv ${archive}.working ${archive})";
  fi
}

bub_cmd() {
  archive=$(echo "$archive" | sed 's/^\///')
  verbose "INFO: Backing up $source to ${destination_scheme}://${ssh_spec}/${archive}";
  cmdfile=$(mktemp)
  trap "rm -f $cmdfile" RETURN
  echo "upload $archive" > "${cmdfile}"
  cat "${cmdfile}" - | ssh -T $ssh_opts "$ssh_spec";
}

local_cmd() {
  verbose "INFO: Backing up $source to ${archive}";
  mkdir -p "$destination_path" && cat > "${archive}.working" && mv "${archive}.working" "${archive}";
}

out_cmd() {
  if [[ "$destination_scheme" = "file" ]]; then
    local_cmd;
  elif [[ "$destination_scheme" = "ssh" ]]; then
    ssh_cmd;
  elif [[ "$destination_scheme" = "bub" ]]; then
    bub_cmd;
  fi
}

trap cleanup_snar EXIT

if [[ -z "$unencrypted" ]]; then
  ( tar_cmd | age_cmd | out_cmd ) && update_snar
else
  ( tar_cmd | out_cmd ) && update_snar
fi
